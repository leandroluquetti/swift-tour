//: [Voltar para Hello World](@previous)
/*:
 ## Vari√°veis e Constantes
 >A linguagem Swift √© fortemente tipada e possui v√°rios tipos de dados,
 >desde os primitivos, como Int, at√© tipos mais avan√ßados e
 >complexos, como objetos. Cada vari√°vel deve ser declarada com
 >um tipo. Caso isso n√£o aconte√ßa, o compilador ir√° inferir o
 >tipo utilizado ao receber o valor.
 
 >N√£o podemos, por exemplo, declarar uma vari√°vel do tipo inteiro (Int)
 >e tentar inserir um texto (String), pois isso gerar√° um erro na
 >compila√ß√£o.
 
 ## Vari√°veis
 >A palavra reservada `var` ser√° utilizada para declararmos vari√°veis mutav√©is.
 >Ou seja seu valor pode sofrer altera√ßoes.
 */

// Declarando vari√°veis com tipos expl√≠citos
var name: String = "Carlos Alberto"
var age: Float = 33.0
var county: String = "Bar√£o Geraldo", city: String = "campinas"

// Declara√ß√£o explicita sem valor inicial
var state: String = String()

name = "Carlos Alberto de Nobrega"
age = 89.7

// Declarando vari√°veis com tipos impl√≠cito
var height = 1.80 // impl√≠cito Double
var weight = 100 // impl√≠cito Int
var nickname = "Zeca" // impl√≠cito String

type(of: height)
type(of: weight)

//: ## Constantes
//: >A palavra reservada `let` ser√° utilizada para declararmos vari√°veis imutav√©is, contantes.
//: >Ou seja seu valor n√£o poder√° ser alterado ap√≥s sua inicializa√ß√£o.

// Declarando com tipos impl√≠cito
let üê∂ = "cachorro"
let üêÆ = "vaca"

// Declarando com tipos expl√≠citos
let oranges: Int = 4
let apples: Int = 5
let trillion: Double = 1_000_000_000.00

//: ## Print de vari√°veis
//: >Use `print` para printar as vari√°veis no console

print("Eu tenho \(apples) ma√ß√£s")
print("Eu tenho \(apples + oranges) frutas!")

let greeting = "Ol√° \(name), voc√™ tem \(age) anos de idade e mede "  + String(height) + "m"
print(greeting)

print(üêÆ, üê∂, separator: ", ", terminator: "!\n")

//: ## Ponto e v√≠rgula (;)
//: >`;` s√≥ deve ser us√°do quando queremos escrever mais de um comando por linha

let cat = "üê±"; print(cat)

//: ## Num√©ricos
//: >tipos num√©ricos e limites

let maxInt: Int = .max
let minInt: Int = .min

let descimalInteger = 17
let binaryInteger = 0b10001
let octalInteger = 0o21
let hexadecimalInteger = 0x11

let decimalDouble = 12.1875
let exponentDouble = 1.21875e2

let oneMillion = 1_000_000
let justOverOneMillion = 1_000_000.000_000_1

//: ## Convers√µes
//: >convers√µes num√©ricas int e float

//let cannotBeNegative: UInt8 = -1
//let tooBig: Int8 = Int8.max + 1
let twoThousand: UInt16 = 2_000
let one: UInt8 = 1
let twoThousandAndOne = twoThousand + UInt16(one)

let three = 3
let pointOneFourOneFiveNine = 0.14159
let pi = Double(three) + pointOneFourOneFiveNine
let œÄ = 3 + 0.14159

let integerPi = Int(pi)
let integerFourPointSeven = Int(4.75)
let integerNegativeThreePointNine = Int(-3.9)

//: ## Typealias
//: >podemos redeclarar um tipo com um novo "apelido" para facilitar o entendimento

typealias AudioSample = UInt16
var maxAmplitudeFound = AudioSample.min // zero

//: ## Booleans
let orangesAreOrange = true
let turnipsAreDelicious = false

if turnipsAreDelicious {
    print("Mmm, tasty turnips!")
} else {
    print("Eww, turnips are horrible.") //ir√° cair aqui
}

// N√£o podemos usar outros tipos al√©m de Bool em controladores de fluxo
let i = 1
/*
 if i {
 
 }
 */
if i == 1 {
    
}

//: ## Tuplas
//: >Tuplas s√£o sequecias ordenadas de objetos customizada

typealias HTTPStatus = (statusCode: Int, message: String)
let http404: HTTPStatus = (404, "Not Found")

let (statusCode, statusMessage) = http404
statusCode
statusMessage
print("The status code is \(statusCode)")
print("The status message is \(statusMessage)")

// Use _ se voc√™ quiser descartar um valor
let (justTheStatusCode, _) = http404
print("The status code is \(justTheStatusCode)")

// Voc√™ pode acessar os valores da tupla por √≠ndices
print("The status code is \(http404.0)")
print("The status message is \(http404.1)")

// Ou pode definir nome para os elementos para poder acess√°-los
let http200: HTTPStatus = (statusCode: 200, message: "OK")
print("The status code is \(http200.statusCode)")
print("The status message is \(http200.message)")

// **Dica** Tuplas tamb√©m podem ser retornadas em fun√ß√µes e m√©todos ;)


//: ## Optionals
//: >Iremos usar opcionais quando n√£o temos certeza se um valor pode ser nulo ou n√£o

let possibleNumber = "123"
let convertedNumber = Int(possibleNumber)
// convertedNumber dever√° ser do tipo "Int?" (optional Int)

// nil
var serverResponseCode: Int? = 404
serverResponseCode = nil

var surveyAnswer: String?
// surveyAnswer ser√° nil antes da inicializa√ß√£o

// Forced Unwrapping

print(convertedNumber!) //NUNCA fa√ßa isso

if convertedNumber != nil {
    print("convertedNumber possui valor de \(convertedNumber!)")
}

//: >Optional binding

if let actualNumber = Int(possibleNumber) {
    print("\'\(possibleNumber)\' possui valor de \(actualNumber)")
} else {
    print("\'\(possibleNumber)\' n√£o p√¥de ser convertido para Int")
}

if let firstNumber = Int("4"),
   let secondNumber = Int("42"),
       firstNumber < secondNumber && secondNumber < 100 {
    print("\(firstNumber) < \(secondNumber) < 100")
}

if let firstNumber = Int("4") {
    if let secondNumber = Int("42") {
        if firstNumber < secondNumber && secondNumber < 100 {
            print("\(firstNumber) < \(secondNumber) < 100")
        }
    }
}

//: ## Error Handling
//: >Error handling possibilida o tratamento de erros determinados e at√© o lan√ßameto de erros para serem tratado por outra parte do c√≥digo

func canThrowError() throws {
    // essa fun√ß√£o pode ou n√£o lan√ßar um erro.
}

do {
    try canThrowError()
    // nenhum erro foi lan√ßado
} catch {
    // um erro foi lan√ßado e precisa ser tratado
}

enum SandwichError: Error {
    case OutOfCleanDishes
    case MissingIngredients([String])
}

func makeASandwich() throws {
    throw SandwichError.MissingIngredients(["manteiga","presunto","p√£o"])
}

func eatASandwich() {
    print("yum yum yum")
}

func washDishes() {
    print("Lave a lou√ßa")
}

func buyGroceries(ingredients: [String]) {
    ingredients.forEach{ i in print(i) }
}

do {
    try makeASandwich()
    eatASandwich()
} catch SandwichError.OutOfCleanDishes {
    washDishes()
} catch SandwichError.MissingIngredients(let ingredients) {
    buyGroceries(ingredients: ingredients)
} catch {
    print("n√£o deveria cair aqui")
}


//: ## Assertions
//: >Usamos assertions quando precisamos que um valor atenda uma determinada condi√ß√£o para continuar

let idade = 0
//let idade = -3
assert(idade >= 0, "A idade n√£o pode ser menor que zero")
//: [Ir para Operadores](@next)
